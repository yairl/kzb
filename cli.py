"""Command line interface for the Kol-Zchut bot."""
from __future__ import annotations

import argparse
import logging
from pathlib import Path

from kzb.data_processing import process_dataset
from kzb.rag_pipeline import KolZchutBot

LOG_FORMAT = "%(asctime)s - %(levelname)s - %(name)s - %(message)s"


def configure_logging(verbose: bool) -> None:
    logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format=LOG_FORMAT)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Kol-Zchut Bot utilities")
    parser.add_argument("command", choices=["prepare", "query"], help="Command to run")
    parser.add_argument("--input", type=Path, default=Path("data/all_pages.json"))
    parser.add_argument(
        "--processed",
        type=Path,
        default=Path("data/processed_pages.jsonl"),
        help="Path to the processed dataset generated by the prepare command",
    )
    parser.add_argument(
        "--embeddings-output",
        type=Path,
        help=(
            "Optional path for storing a serialized embedding index when running the "
            "prepare command"
        ),
    )
    parser.add_argument(
        "--embeddings",
        type=Path,
        help="Optional path to a serialized embedding index for the query command",
    )
    parser.add_argument("--question", type=str, help="Hebrew question for the query command")
    parser.add_argument("--top-k", type=int, default=5, help="Number of pages to retrieve")
    parser.add_argument("--verbose", action="store_true", help="Enable debug logging")
    return parser.parse_args()


def run_prepare(
    input_path: Path, processed_path: Path, embeddings_output: Path | None
) -> None:
    logging.info("Preparing dataset from %s", input_path)
    process_dataset(input_path, processed_path)
    logging.info("Dataset written to %s", processed_path)

    if embeddings_output is not None:
        from kzb.data_processing import load_processed_pages
        from kzb.vector_store import save_vector_index

        logging.info("Loading processed pages to build embedding index")
        pages = load_processed_pages(processed_path)
        embeddings_output.parent.mkdir(parents=True, exist_ok=True)
        save_vector_index(pages, embeddings_output)
        logging.info("Embedding index written to %s", embeddings_output)


def run_query(
    processed_path: Path, question: str, top_k: int, embeddings_path: Path | None
) -> None:
    if not question:
        raise SystemExit("--question is required for the query command")
    bot = KolZchutBot(processed_path, embeddings_path=embeddings_path)
    answer = bot.answer_query(question, top_k=top_k)
    print(answer)


def main() -> None:
    args = parse_args()
    configure_logging(args.verbose)

    if args.command == "prepare":
        run_prepare(args.input, args.processed, args.embeddings_output)
    elif args.command == "query":
        run_query(args.processed, args.question, args.top_k, args.embeddings)
    else:  # pragma: no cover
        raise SystemExit(f"Unknown command: {args.command}")


if __name__ == "__main__":
    main()
